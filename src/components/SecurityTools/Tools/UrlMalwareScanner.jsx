import { useState } from "react";
import { scanUrlForMalware } from "./utils/security-utils";
import "../Tools.css";

const UrlMalwareScanner = () => {
  const [url, setUrl] = useState("");
  const [scanResults, setScanResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const scanUrl = async () => {
    if (!url.trim()) return;

    setIsLoading(true);
    setError(null);
    setScanResults(null);

    try {
      const results = await scanUrlForMalware(url);

      // Check if the results contain an error
      if (results.error) {
        setError(results.message);
        setScanResults(null);
      } else {
        setScanResults(results);
        setError(null);
      }
    } catch (err) {
      console.error("Error scanning URL:", err);
      setError("Failed to scan URL. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && url.trim()) {
      scanUrl();
    }
  };

  const validateUrl = (input) => {
    setUrl(input);
    // Clear error if user is typing a new URL
    if (error) setError(null);
  };

  const getScoreColor = (score) => {
    if (score >= 0 && score <= 2) return "sec-tool-text-success";
    if (score > 2 && score <= 5) return "sec-tool-text-warning";
    return "sec-tool-text-danger";
  };

  const getScoreLabel = (score) => {
    if (score >= 0 && score <= 2) return "Clean";
    if (score > 2 && score <= 5) return "Suspicious";
    return "Malicious";
  };

  return (
    <div className="sec-tool-page">
      <div className="sec-tool-page-container">
        

        <div className="sec-tool-page-header">
          <h1 className="sec-tool-page-title">URL Malware Scanner</h1>
          <p className="sec-tool-page-subtitle">Scan URLs for malware and phishing content</p>
        </div>

        <div className="sec-tool-page-content">
          <div className="sec-tool-form-group">
            <label htmlFor="urlToScan" className="sec-tool-label">
              Enter URL to Scan
            </label>
            <input
              type="text"
              id="urlToScan"
              className="sec-tool-input"
              value={url}
              onChange={(e) => validateUrl(e.target.value)}
              onKeyDown={handleKeyPress}
              placeholder="https://example.com"
            />
          </div>

          <button className="sec-tool-button" onClick={scanUrl} disabled={isLoading || !url.trim()}>
            {isLoading ? "Scanning..." : "Scan URL"}
          </button>

          {isLoading && (
            <div className="sec-tool-loading">
              <div className="sec-tool-spinner"></div>
              <p>Scanning URL for threats...</p>
            </div>
          )}

          {error && (
            <div className="sec-tool-error">
              <p>{error}</p>
              <p className="sec-tool-help-text">Try again or check if the URL is accessible from your browser.</p>
            </div>
          )}

          {scanResults && !error && (
            <div className="sec-tool-result">
              <h4 className="sec-tool-result-header">Scan Results:</h4>

              {scanResults.isMockData && (
                <div className="sec-tool-notice">
                  <p>
                    <strong>Note:</strong> Using local scan analysis. External API connection could not be established.
                  </p>
                </div>
              )}

              <div className="sec-tool-scan-summary">
                <div className={`sec-tool-scan-score ${getScoreColor(scanResults.score)}`}>
                  <div className="sec-tool-score-value">{scanResults.score}/10</div>
                  <div className="sec-tool-score-label">{getScoreLabel(scanResults.score)}</div>
                </div>

                <div className="sec-tool-scan-stats">
                  <p>
                    <strong>URL:</strong> {scanResults.url}
                  </p>
                  <p>
                    <strong>Scan Date:</strong> {new Date(scanResults.scanDate).toLocaleString()}
                  </p>
                  <p>
                    <strong>Detection Engines:</strong> {scanResults.enginesDetected}/{scanResults.enginesTotal}{" "}
                    detected threats
                  </p>
                </div>
              </div>

              {scanResults.categories && scanResults.categories.length > 0 && (
                <div className="sec-tool-categories">
                  <h4>Detected Categories:</h4>
                  <div className="sec-tool-badge-container">
                    {scanResults.categories.map((category, index) => (
                      <span key={index} className="sec-tool-badge sec-tool-badge-danger">
                        {category}
                      </span>
                    ))}
                  </div>
                </div>
              )}

              {scanResults.detections && scanResults.detections.length > 0 && (
                <div className="sec-tool-detections">
                  <h4>Detection Details:</h4>
                  <table className="sec-tool-table">
                    <thead>
                      <tr>
                        <th>Engine</th>
                        <th>Category</th>
                        <th>Result</th>
                      </tr>
                    </thead>
                    <tbody>
                      {scanResults.detections.map((detection, index) => (
                        <tr key={index}>
                          <td>{detection.engine}</td>
                          <td>{detection.category}</td>
                          <td
                            className={
                              detection.result === "clean" ? "sec-tool-text-success" : "sec-tool-text-danger"
                            }
                          >
                            {detection.result}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}

              {scanResults.recommendations && (
                <div className="sec-tool-recommendations">
                  <h4>Recommendations:</h4>
                  <ul className="sec-tool-list">
                    {scanResults.recommendations.map((rec, index) => (
                      <li key={index}>{rec}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          )}

          <div className="sec-tool-info">
            <p>
              This tool scans URLs against multiple security engines to detect malware, phishing, and other malicious
              content.
            </p>
            <p className="sec-tool-disclaimer">
              Note: For best results, ensure the URL starts with http:// or https://.
            </p>
          </div>
        </div>

      </div>
    </div>
  );
};

export default UrlMalwareScanner;
